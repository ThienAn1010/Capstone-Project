generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthProvider {
  id          String @id @default(cuid())
  userId      String @unique
  providerKey String @unique
  user        User   @relation(fields: [userId], references: [id])
}

model User {
  id             String          @id @default(cuid())
  username       String          @unique
  password       String?
  name           String
  picture        String
  createdAt      DateTime        @default(now())
  role           Role            @default(paperRequester)
  authProvider   AuthProvider?
  operator       Operator?
  paperMaker     PaperMaker?
  paperRequester PaperRequester?
}

model Operator {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model PaperRequester {
  id      String    @id @default(cuid())
  userId  String    @unique
  user    User      @relation(fields: [userId], references: [id])
  booking Booking[]
}

model PaperMaker {
  id                  String               @id @default(cuid())
  userId              String               @unique
  lat                 Float
  long                Float
  totalCases          Int                  @default(0)
  pastSuccessfulCases Int                  @default(0)
  rating              Float                @default(0)
  status              PaperRequesterStatus @default(available)
  isConfirmed         Boolean              @default(false)
  user                User                 @relation(fields: [userId], references: [id])
  offeredService      OfferedService[]
}

model Service {
  id             String           @id @default(cuid())
  name           String
  description    String
  offeredService OfferedService[]
}

model OfferedService {
  id           String     @id @default(cuid())
  paperMakerId String
  serviceId    String
  price        Float
  duration     Int
  createdAt    DateTime   @default(now())
  paperMaker   PaperMaker @relation(fields: [paperMakerId], references: [id])
  service      Service    @relation(fields: [serviceId], references: [id])
  booking      Booking[]
}

model Booking {
  id               String         @id @default(cuid())
  paperRequesterId String
  offeredServiceId String
  note             String
  offeredService   OfferedService @relation(fields: [offeredServiceId], references: [id])
  paperRequester   PaperRequester @relation(fields: [paperRequesterId], references: [id])
  transaction      Deal?
}

model Deal {
  id          String  @id @default(cuid())
  bookingId   String  @unique
  actualPrice Float
  payAmount   Float
  keep        Float
  booking     Booking @relation(fields: [bookingId], references: [id])
}

enum Role {
  operator
  paperRequester
  paperMaker
}

enum PaperRequesterStatus {
  available
  busy
}

enum BookingStatus {
  accept
  deny
}
