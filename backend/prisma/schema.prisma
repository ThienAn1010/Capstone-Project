generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model AuthProvider {
  id          String @id @default(cuid())
  providerKey String @unique
  userId      String @unique
  user        User   @relation(fields: [userId], references: [id])
}

model User {
  id           String        @id @default(cuid())
  username     String
  password     String?
  name         String
  picture      String        @default("https://res.cloudinary.com/dybygufkr/image/upload/v1593000869/avatar_q2ysxd.jpg")
  phoneNumber  String?
  createdAt    DateTime      @default(now())
  role         Role          @default(user)
  address      String?
  lat          Float?
  long         Float?
  authProvider AuthProvider?
  bookings     Booking[]
  operator     Operator?
  paperMaker   PaperMaker?
}

model Operator {
  id     String @id @default(cuid())
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])
}

model PaperMaker {
  id                  String           @id @default(cuid())
  userId              String           @unique
  totalCases          Int              @default(0)
  pastSuccessfulCases Int              @default(0)
  rating              Float            @default(0)
  status              PaperMakerStatus @default(available)
  isConfirmed         Boolean          @default(false)
  aboutMe             String?
  numberOfReviews     Int              @default(0)
  user                User             @relation(fields: [userId], references: [id])
  offeredServices     OfferedService[]
}

model Service {
  id              String           @id @default(cuid())
  name            String           @unique
  description     String
  offeredServices OfferedService[]
}

model OfferedService {
  id           String     @id @default(cuid())
  paperMakerId String
  serviceId    String
  price        Float
  duration     Int
  createdAt    DateTime   @default(now())
  description  String
  documents    String
  estimate     String
  paperMaker   PaperMaker @relation(fields: [paperMakerId], references: [id])
  service      Service    @relation(fields: [serviceId], references: [id])
  bookings     Booking[]
  thumbnail    String     @default("https://images.smartcapitalmind.com/person-using-pen-near-documents-and-chart.jpg")
}

model Booking {
  id                  String         @id @default(cuid())
  offeredServiceId    String
  userId              String
  note                String
  payAmount           Float
  status              BookingStatus  @default(pendingConfirm)
  acceptedAt          DateTime?
  createdAt           DateTime       @default(now())
  droppedAt           DateTime?
  finishedAt          DateTime?
  isDroppedConfirmed  Boolean        @default(false)
  isFinishedConfirmed Boolean        @default(false)
  paymentIntentId     String         @default("")
  user                User           @relation(fields: [userId], references: [id])
  offeredService      OfferedService @relation(fields: [offeredServiceId], references: [id])
}

enum Role {
  operator
  paperMaker
  user
}

enum PaperMakerStatus {
  available
  busy
}

enum BookingStatus {
  accept
  deny
  pendingConfirm
  drop
  success
}
